[{"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\index.js":"1","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph.js":"2","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\App.js":"3","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\ControlPanel.js":"4","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph2.js":"5","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph3.js":"6"},{"size":517,"mtime":1644479087944,"results":"7","hashOfConfig":"8"},{"size":2722,"mtime":1644490589299,"results":"9","hashOfConfig":"8"},{"size":175,"mtime":1644491568427,"results":"10","hashOfConfig":"8"},{"size":5036,"mtime":1644498491079,"results":"11","hashOfConfig":"8"},{"size":2820,"mtime":1644498438236,"results":"12","hashOfConfig":"8"},{"size":2718,"mtime":1644498277295,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4welsq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\index.js",[],"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph.js",["27"],"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\App.js",[],"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\ControlPanel.js",["28"],"C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph2.js",["29"],"import React from 'react';\r\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\r\nimport './app.css'\r\n\r\n\r\n\r\nconst  Graph = () => {\r\n    const ws = new WebSocket(\"wss://stream.binance.com:9443/ws/btcusdt@kline_1m\");\r\n\r\n    const chartRef = React.useRef(null);\r\n\r\n    \r\n    // TradingView Static Chart Properties\r\n    const chartProperties ={\r\n        width: 0,\r\n        height: 0,\r\n        baseLineStyle:2,\r\n        timeScale: {\r\n            timeVisible: true,\r\n            secondsVisible: false,\r\n            borderColor: '#262626',\r\n        },\r\n        crosshair: {\r\n            mode: CrosshairMode.Normal\r\n        },\r\n        layout: {\r\n            backgroundColor: '#262626',\r\n            textColor: ' #9ACCFF',\r\n        },\r\n        grid: {\r\n            vertLines: {\r\n              color: '#262626',\r\n            },\r\n            horzLines: {\r\n              color: '#262626',\r\n            },\r\n          },\r\n        openVisible: false\r\n\r\n\r\n    }\r\n\r\n    React.useEffect(()=> {\r\n        if(chartRef.current) {\r\n            const chart = createChart(chartRef.current, chartProperties);\r\n            prepareChart(chart, ws);\r\n        }\r\n    }, [])\r\n\r\n\r\n    function prepareChart(chart, ws) {\r\n        const barSeries = chart.addBarSeries({\r\n            upColor: '#74C2E3',\r\n            downColor: '#FF0000',\r\n            wickDownColor: '595959',\r\n            wickUpColor: '#595959',\r\n            thinBars:false,\r\n            \r\n        });\r\n\r\n        // Fetch binance static chart REST API\r\n        fetch('https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=1000')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const cdata = data.map(d => {\r\n                    return {\r\n                        time: d[0]/1000,\r\n                        open: parseFloat(d[1]),\r\n                        high: parseFloat(d[2]),\r\n                        low: parseFloat(d[3]),\r\n                        close: parseFloat(d[4])\r\n                    }\r\n                });\r\n                barSeries.setData(cdata);\r\n                console.log(\"Binance Static Kline REST API called with fetch()\");\r\n            })\r\n            .catch(err => console.log(err))\r\n        // If fetch api gives CORS issue, use a node proxy\r\n\r\n        // Fetch live data from Binance WS API\r\n        ws.onmessage = evt => {\r\n            const data = JSON.parse(evt.data);\r\n            console.log(data);\r\n            const chartData = {\r\n                time: data.k.t,\r\n                open: data.k.o,\r\n                high: data.k.h,\r\n                low: data.k.l,\r\n                close: data.k.c\r\n            }\r\n            barSeries.update(chartData);\r\n        }\r\n    }\r\n\r\n    return <div className='wrapper' ref={chartRef} />;\r\n}\r\n\r\nexport default Graph;","C:\\Users\\MyPC2\\Desktop\\TZ\\trading-bin\\src\\Graph3.js",["30"],{"ruleId":"31","severity":1,"message":"32","line":45,"column":8,"nodeType":"33","endLine":45,"endColumn":10,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":22,"column":8,"nodeType":"37","messageId":"38","endLine":22,"endColumn":14},{"ruleId":"31","severity":1,"message":"32","line":48,"column":8,"nodeType":"33","endLine":48,"endColumn":10,"suggestions":"39"},{"ruleId":"31","severity":1,"message":"32","line":45,"column":8,"nodeType":"33","endLine":45,"endColumn":10,"suggestions":"40"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'chartProperties' and 'ws'. Either include them or remove the dependency array.","ArrayExpression",["41"],"no-unused-vars","'Graph3' is defined but never used.","Identifier","unusedVar",["42"],["43"],{"desc":"44","fix":"45"},{"desc":"44","fix":"46"},{"desc":"44","fix":"47"},"Update the dependencies array to be: [chartProperties, ws]",{"range":"48","text":"49"},{"range":"50","text":"49"},{"range":"51","text":"49"},[1084,1086],"[chartProperties, ws]",[1153,1155],[1084,1086]]