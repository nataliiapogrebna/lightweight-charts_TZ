{"version":3,"sources":["Graph.js","Graph2.js","ControlPanel.js","App.js","index.js"],"names":["Graph","ws","WebSocket","chartRef","React","useRef","chartProperties","width","height","timeScale","timeVisible","secondsVisible","borderColor","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","rightPriceScale","priceFormat","type","minMove","formatter","price","parseFloat","toFixed","useEffect","current","chart","candleSeries","addCandlestickSeries","upColor","downColor","wickDownColor","wickUpColor","fetch","then","res","json","data","console","log","cdata","map","d","time","open","high","low","close","setData","catch","err","onmessage","evt","JSON","parse","chartData","k","t","o","h","l","c","update","prepareChart","createChart","className","ref","Graph2","barSeries","addBarSeries","thinBars","crosshair","mode","CrosshairMode","Normal","ControlPanel","component","options","setOpen","anchorRef","selectedIndex","setSelectedIndex","handleClose","event","contains","target","IconButton","aria-label","sx","ButtonGroup","variant","Button","onClick","info","size","aria-controls","undefined","aria-expanded","aria-haspopup","prevOpen","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","option","index","MenuItem","selected","handleMenuItemClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f36a02d8.chunk.js","sourcesContent":["import React from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport \"./app.css\";\n\nconst Graph = () => {\n  const ws = new WebSocket(\n    \"wss://stream.binance.com:9443/ws/btcusdt@kline_10m\"\n    // \"wss://stream.binance.com:9443/ws/btcusdt@kline_10m\"\n  );\n\n  const chartRef = React.useRef(null);\n\n  // TradingView Static Chart Properties\n  const chartProperties = {\n    width: 0,\n    height: 0,\n    timeScale: {\n      timeVisible: true,\n      secondsVisible: false,\n      borderColor: \"#262626\",\n    },\n    layout: {\n      backgroundColor: \"#262626\",\n      textColor: \" #9ACCFF\",\n    },\n    grid: {\n      vertLines: {\n        color: \"#262626\",\n      },\n      horzLines: {\n        color: \"#262626\",\n      },\n    },\n    priceScale: {\n      borderColor: \"#262626\",\n    },\n    rightPriceScale: {\n      borderColor: \"rgba(197, 203, 206, 0.8)\",\n    },\n    priceFormat: {\n      type: \"custom\",\n      minMove: 0.25,\n      formatter: (price) => parseFloat(price).toFixed(8),\n    },\n  };\n\n  React.useEffect(() => {\n    if (chartRef.current) {\n      const chart = createChart(chartRef.current, chartProperties);\n      prepareChart(chart, ws);\n    }\n  }, []);\n\n  function prepareChart(chart, ws) {\n    const candleSeries = chart.addCandlestickSeries({\n      upColor: \"#74C2E3\",\n      downColor: \"#FF0000\",\n      wickDownColor: \"595959\",\n      wickUpColor: \"#595959\",\n    });\n\n    // Fetch binance static chart REST API\n    fetch(\n      \"https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=1000\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        const cdata = data.map((d) => {\n          return {\n            time: d[0] / 1000,\n            open: parseFloat(d[1]),\n            high: parseFloat(d[2]),\n            low: parseFloat(d[3]),\n            close: parseFloat(d[4]),\n          };\n        });\n        candleSeries.setData(cdata);\n        console.log(\"Binance Static Kline REST API called with fetch()\");\n      })\n      .catch((err) => console.log(err));\n    // If fetch api gives CORS issue, use a node proxy\n\n    // Fetch live data from Binance WS API\n    ws.onmessage = (evt) => {\n      const data = JSON.parse(evt.data);\n      console.log(data);\n      const chartData = {\n        time: data.k.t,\n        open: data.k.o,\n        high: data.k.h,\n        low: data.k.l,\n        close: data.k.c,\n      };\n      candleSeries.update(chartData);\n      console.log(\"evt.data\", evt.data);\n    };\n  }\n\n  return <div className=\"wrapper\" ref={chartRef} />;\n};\n\nexport default Graph;\n","import React from \"react\";\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\nimport \"./app.css\";\n\nconst Graph2 = () => {\n  const ws = new WebSocket(\n    \"wss://stream.binance.com:9443/ws/btcusdt@kline_10m\"\n  );\n\n  const chartRef = React.useRef(null);\n\n  // TradingView Static Chart Properties\n  //   const chartProperties = {\n  //     width: 0,\n  //     height: 0,\n  //     baseLineStyle: 2,\n  //     timeScale: {\n  //       timeVisible: true,\n  //       secondsVisible: false,\n  //       borderColor: \"#262626\",\n  //     },\n  //     crosshair: {\n  //       mode: CrosshairMode.Normal,\n  //     },\n  //     layout: {\n  //       backgroundColor: \"#262626\",\n  //       textColor: \" #9ACCFF\",\n  //     },\n  //     grid: {\n  //       vertLines: {\n  //         color: \"#262626\",\n  //       },\n  //       horzLines: {\n  //         color: \"#262626\",\n  //       },\n  //     },\n  //     openVisible: false,\n  //   };\n\n  //   React.useEffect(() => {\n  //     if (chartRef.current) {\n  //       const chart = createChart(chartRef.current, chartProperties);\n  //       prepareChart(chart, ws);\n  //     }\n  //   }, []);\n\n  //   function prepareChart(chart, ws) {\n  //     const barSeries = chart.addBarSeries({\n  //       upColor: \"#74C2E3\",\n  //       downColor: \"#FF0000\",\n  //       wickDownColor: \"595959\",\n  //       wickUpColor: \"#595959\",\n  //       thinBars: false,\n  //     });\n  React.useEffect(() => {\n    if (chartRef.current) {\n      const chart = createChart(chartRef.current, {\n        width: 0,\n        height: 0,\n        timeScale: {\n          timeVisible: true,\n          secondsVisible: false,\n          borderColor: \"#262626\",\n        },\n        layout: {\n          backgroundColor: \"#262626\",\n          textColor: \" #9ACCFF\",\n        },\n        grid: {\n          vertLines: {\n            color: \"#262626\",\n          },\n          horzLines: {\n            color: \"#262626\",\n          },\n        },\n        crosshair: {\n          mode: CrosshairMode.Normal,\n        },\n        rightPriceScale: {\n          borderColor: \"#262626\",\n        },\n      });\n      prepareChart(chart, ws);\n    }\n  }, []);\n\n  function prepareChart(chart, ws) {\n    const barSeries = chart.addBarSeries({\n      upColor: \"#74C2E3\",\n      downColor: \"#FF0000\",\n      thinBars: true,\n    });\n\n    // Fetch binance static chart REST API\n    fetch(\n      \"https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=1000\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        const cdata = data.map((d) => {\n          return {\n            time: d[0] / 1000,\n            open: parseFloat(d[1]),\n            high: parseFloat(d[2]),\n            low: parseFloat(d[3]),\n            close: parseFloat(d[4]),\n          };\n        });\n        barSeries.setData(cdata);\n        console.log(\"Binance Static Kline REST API called with fetch()\");\n      })\n      .catch((err) => console.log(err));\n    // If fetch api gives CORS issue, use a node proxy\n\n    // Fetch live data from Binance WS API\n    ws.onmessage = (evt) => {\n      const data = JSON.parse(evt.data);\n      console.log(data);\n      const chartData = {\n        time: data.k.t,\n        open: data.k.o,\n        high: data.k.h,\n        low: data.k.l,\n        close: data.k.c,\n      };\n      barSeries.update(chartData);\n    };\n  }\n\n  return <div className=\"wrapper\" ref={chartRef} />;\n};\n\nexport default Graph2;\n","import * as React from \"react\";\n\nimport IconButton from \"@mui/material/IconButton\";\nimport AddLocationIcon from \"@mui/icons-material/AddLocation\";\nimport AlignVerticalBottomIcon from \"@mui/icons-material/AlignVerticalBottom\";\nimport AppRegistrationIcon from \"@mui/icons-material/AppRegistration\";\n\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport Grow from \"@mui/material/Grow\";\nimport Paper from \"@mui/material/Paper\";\nimport Popper from \"@mui/material/Popper\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MenuList from \"@mui/material/MenuList\";\n\nimport Graph from \"./Graph\";\nimport Graph2 from \"./Graph2\";\n// import Graph3 from \"./Graph3\";\n\nconst ControlPanel = (component) => {\n  const options = [\"M1\", \"M2\", \"M3\", \"M30\", \"H1\", \"H4\", \"D1\"];\n\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n  const handleClick = () => {\n    console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <h1>lightweight-charts</h1>\n      <div className=\"container\">\n        <div className=\"controll__btns-container\">\n          <p className=\"graph-title\">#NQH2@CME</p>\n          <IconButton aria-label=\"AddLocationIcon\" sx={{ color: \"#ffffff\" }}>\n            <AddLocationIcon />\n          </IconButton>\n          <IconButton\n            aria-label=\"AlignVerticalBottomIcon\"\n            sx={{ color: \"#ffffff\" }}\n          >\n            <AlignVerticalBottomIcon />\n          </IconButton>\n          <IconButton\n            aria-label=\"AppRegistrationIcon\"\n            sx={{ color: \"#ffffff\" }}\n          >\n            <AppRegistrationIcon />\n          </IconButton>\n\n          <ButtonGroup\n            variant=\"outlined\"\n            ref={anchorRef}\n            aria-label=\"split button\"\n          >\n            <Button\n              onClick={handleClick}\n              sx={{ color: \"#ffffff\", borderColor: \"#ffffff\" }}\n            >\n              {options[selectedIndex]}\n            </Button>\n            <Button\n              size=\"small\"\n              aria-controls={open ? \"split-button-menu\" : undefined}\n              aria-expanded={open ? \"true\" : undefined}\n              aria-label=\"select merge strategy\"\n              aria-haspopup=\"menu\"\n              onClick={handleToggle}\n              sx={{ color: \"#ffffff\", borderColor: \"#ffffff\" }}\n            >\n              <ArrowDropDownIcon />\n            </Button>\n          </ButtonGroup>\n          <Popper\n            open={open}\n            anchorEl={anchorRef.current}\n            role={undefined}\n            transition\n            disablePortal\n            className=\"toFront\"\n          >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin:\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                }}\n              >\n                <Paper>\n                  <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList id=\"split-button-menu\">\n                      {options.map((option, index) => (\n                        <MenuItem\n                          key={option}\n                          selected={index === selectedIndex}\n                          onClick={(event) => handleMenuItemClick(event, index)}\n                        >\n                          {option}\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </div>\n        <Graph />\n        <Graph2 />\n        {/* <Graph3/> */}\n      </div>\n    </>\n  );\n};\nexport default ControlPanel;\n","import ControlPanel from \"./ControlPanel\";\n\nimport \"./app.css\";\n\nfunction App() {\n  return (\n    <>\n      <ControlPanel />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}